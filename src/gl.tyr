with string := tyr.io.CString;

public type GLattr := int;
// note: the C implementation is a void* but I think opaque is the correct way of doing it.
public type GLContext := mem.OpaquePointer["SDL_GLContext"];

/**
 * Symbols with a SDL_GL_ prefix
 */
public type gl {

  // macros
  // SDL_GLattr
  public type val RED_SIZE = 0
  public type val GREEN_SIZE = 1
  public type val BLUE_SIZE = 2
  public type val ALPHA_SIZE = 3
  public type val BUFFER_SIZE = 4
  public type val DOUBLEBUFFER = 5
  public type val DEPTH_SIZE = 6
  public type val STENCIL_SIZE = 7
  public type val ACCUM_RED_SIZE = 8
  public type val ACCUM_GREEN_SIZE = 9
  public type val ACCUM_BLUE_SIZE = 10
  public type val ACCUM_ALPHA_SIZE = 11
  public type val STEREO = 12
  public type val MULTISAMPLEBUFFERS = 13
  public type val MULTISAMPLESAMPLES = 14
  public type val ACCELERATED_VISUAL = 15
  public type val RETAINED_BACKING = 16
  public type val CONTEXT_MAJOR_VERSION = 17
  public type val CONTEXT_MINOR_VERSION = 18
  public type val CONTEXT_EGL = 19
  public type val CONTEXT_FLAGS = 20
  public type val CONTEXT_PROFILE_MASK = 21
  public type val SHARE_WITH_CURRENT_CONTEXT = 22
  public type val FRAMEBUFFER_SRGB_CAPABLE = 23
  public type val CONTEXT_RELEASE_BEHAVIOR = 24
  public type val CONTEXT_RESET_NOTIFICATION = 25
  public type val CONTEXT_NO_ERROR = 26

  // SDL_GLprofile
  public type val CONTEXT_PROFILE_CORE           = 0x0001i
  public type val CONTEXT_PROFILE_COMPATIBILITY  = 0x0002i
  public type val CONTEXT_PROFILE_ES             = 0x0004i /**< GLX_CONTEXT_ES2_PROFILE_BIT_EXT */


  // functions
  // unused symbols as of now
  //SDL_GL_LoadLibrary() : extern sdl.SDL_GL_LoadLibrary
  //SDL_GL_GetProcAddress
  //SDL_GL_UnloadLibrary

/**
 *  \brief Return true if an OpenGL extension is supported for the current
 *         context.
 */
  public type def extensionSupported(extension : string) : bool
    extern sdl.SDL_GL_ExtensionSupported


/**
 *  \brief Get the actual value for an attribute from the current context.
 *
 *  \return 0 on success, or -1 if the attribute could not be retrieved.
 *          The integer at \c value will be modified in either case.
 */
  public type def getAttribute(attr : GLattr, value : Ref[int]) : int
    extern sdl.SDL_GL_GetAttribute
/**
 *  \brief Set an OpenGL window attribute before window creation.
 *
 *  \return 0 on success, or -1 if the attribute could not be set.
 */
  public type def setAttribute(attr : GLattr, value : int) : int
    extern sdl.SDL_GL_SetAttribute
/**
 *  \brief Reset all previously set OpenGL context attributes to their default values
 */
  public type def resetAttributes : void
    extern sdl.SDL_GL_ResetAttributes


/**
 *  \brief Create an OpenGL context for use with an OpenGL window, and make it
 *         current.
 *
 *  \sa SDL_GL_DeleteContext()
 */
  public type def createContext(window : Window) : GLContext
    extern sdl.SDL_GL_CreateContext;
/**
 *  \brief Delete an OpenGL context.
 *
 *  \sa SDL_GL_CreateContext()
 */
  public type def deleteContext(context : GLContext) : void
    extern sdl.SDL_GL_DeleteContext

/**
 *  \brief Set up an OpenGL context for rendering into an OpenGL window.
 *
 *  \note The context must have been created with a compatible window.
 */
  public
  type def makeCurrent(window : Window, context : GLContext)
    : int
    extern sdl.SDL_GL_MakeCurrent
/**
 *  \brief Get the currently active OpenGL window.
 */
  public type def getCurrentWindow : Window
    extern sdl.SDL_GL_GetCurrentWindow
/**
 *  \brief Get the currently active OpenGL context.
 */
  public type def getCurrentContext : GLContext
    extern sdl.SDL_GL_GetCurrentContext

/**
 *  \brief Get the size of a window's underlying drawable in pixels (for use
 *         with glViewport).
 *
 *  \param window   Window from which the drawable size should be queried
 *  \param w        Pointer to variable for storing the width in pixels, may be NULL
 *  \param h        Pointer to variable for storing the height in pixels, may be NULL
 *
 * This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI
 * drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a
 * platform with high-DPI support (Apple calls this "Retina"), and not disabled
 * by the SDL_HINT_VIDEO_HIGHDPI_DISABLED hint.
 *
 *  \sa SDL_GetWindowSize()
 *  \sa SDL_CreateWindow()
 */
  public
  type def getDrawableSize(window : Window, w : Ref[int], h : Ref[int])
    : void
    extern sdl.SDL_GL_GetDrawableSize

/**
 *  \brief Get the swap interval for the current OpenGL context.
 *
 *  \return 0 if there is no vertical retrace synchronization, 1 if the buffer
 *          swap is synchronized with the vertical retrace, and -1 if late
 *          swaps happen immediately instead of waiting for the next retrace.
 *          If the system can't determine the swap interval, or there isn't a
 *          valid current context, this will return 0 as a safe default.
 *
 *  \sa SDL_GL_SetSwapInterval()
 */
  public type def getDrawableSize : int 
    extern sdl.SDL_GL_GetSwapInterval
/**
 *  \brief Set the swap interval for the current OpenGL context.
 *
 *  \param interval 0 for immediate updates, 1 for updates synchronized with the
 *                  vertical retrace. If the system supports it, you may
 *                  specify -1 to allow late swaps to happen immediately
 *                  instead of waiting for the next retrace.
 *
 *  \return 0 on success, or -1 if setting the swap interval is not supported.
 *
 *  \sa SDL_GL_GetSwapInterval()
 */
  public type def setDrawableSize(interval : int) : int 
    extern sdl.SDL_GL_SetSwapInterval

/**
 * \brief Swap the OpenGL buffers for a window, if double-buffering is
 *        supported.
 */
  public type def swapWindow(window : Window) : void
    extern sdl.SDL_GL_SwapWindow

// note: these functions come from renderer and might not be useful here
/**
 *  \brief Bind the texture to the current OpenGL/ES/ES2 context for use with
 *         OpenGL instructions.
 *
 *  \param texture  The SDL texture to bind
 *  \param texw     A pointer to a float that will be filled with the texture width
 *  \param texh     A pointer to a float that will be filled with the texture height
 *
 *  \return 0 on success, or -1 if the operation is not supported
 */
//  public
//  type def bindTexture(window : Ref[SDL_Texture], texw : Ref[float], texh : Ref[float]) : int
//    extern sdl.SDL_GL_BindTexture

/**
 *  \brief Unbind a texture from the current OpenGL/ES/ES2 context.
 *
 *  \param texture  The SDL texture to unbind
 *
 *  \return 0 on success, or -1 if the operation is not supported
 */
//  public
//  type def unbindTexture(window : Ref[SDL_Texture]) : int
//    extern sdl.SDL_GL_UnbindTexture
}
