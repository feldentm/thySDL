// keep in sync with SDL_events.h

// provide SDL-style integer type names
with Sint32 := Integer[32]
with Uint32 := Unsigned[32]
with Uint16 := Unsigned[16]
with Uint8 := Unsigned[8]

/**
 * The types of events that can be delivered.
 */
public enum EventType <: Unsigned[32] {
  /**< Unused (do not remove) */
  FIRSTEVENT   = 0u,

  /* Application events */

  /**< User-requested quit */
  QUIT   = 0x100u,

  /* These application events have special meaning on iOS, see README-ios.md for details */

  /**< The application is being terminated by the OS
     Called on iOS in applicationWillTerminate()
     Called on Android in onDestroy()
  */
  APP_TERMINATING,
  /**< The application is low on memory, free memory if possible.
     Called on iOS in applicationDidReceiveMemoryWarning()
     Called on Android in onLowMemory()
  */
  APP_LOWMEMORY,
  /**< The application is about to enter the background
     Called on iOS in applicationWillResignActive()
     Called on Android in onPause()
  */
  APP_WILLENTERBACKGROUND,
  /**< The application did enter the background and may not get CPU for some time
     Called on iOS in applicationDidEnterBackground()
     Called on Android in onPause()
  */
  APP_DIDENTERBACKGROUND,
  /**< The application is about to enter the foreground
     Called on iOS in applicationWillEnterForeground()
     Called on Android in onResume()
  */
  APP_WILLENTERFOREGROUND,
  /**< The application is now interactive
     Called on iOS in applicationDidBecomeActive()
     Called on Android in onResume()
  */
  APP_DIDENTERFOREGROUND,

  /* Display events */

  /**< Display state change */
  DISPLAYEVENT   = 0x150u,

  /* Window events */

  /**< Window state change */
  WINDOWEVENT  = 0x200u,

  /**< System specific event */
  SYSWMEVENT,

  /* Keyboard events */

  /**< Key pressed */
  KEYDOWN  = 0x300u,
  /**< Key released */
  KEYUP,
  /**< Keyboard text editing (composition) */
  TEXTEDITING,
  /**< Keyboard text input */
  TEXTINPUT,
/**< Keymap changed due to a system event such as an
     input language or keyboard layout change.
  */
  KEYMAPCHANGED,

  /* Mouse events */

  /**< Mouse moved */
  MOUSEMOTION  = 0x400u,
  /**< Mouse button pressed */
  MOUSEBUTTONDOWN,
  /**< Mouse button released */
  MOUSEBUTTONUP,
  /**< Mouse wheel motion */
  MOUSEWHEEL,

  /* Joystick events */

  /**< Joystick axis motion */
  JOYAXISMOTION  = 0x600u,
    /**< Joystick trackball motion */
  JOYBALLMOTION,
    /**< Joystick hat position change */
  JOYHATMOTION,
   /**< Joystick button pressed */
  JOYBUTTONDOWN,
   /**< Joystick button released */
  JOYBUTTONUP,
  /**< A new joystick has been inserted into the system */
  JOYDEVICEADDED,
  /**< An opened joystick has been removed */
  JOYDEVICEREMOVED,

  /* Game controller events */

  /**< Game controller axis motion */
  CONTROLLERAXISMOTION  = 0x650u,
   /**< Game controller button pressed */
  CONTROLLERBUTTONDOWN,
  /**< Game controller button released */
  CONTROLLERBUTTONUP,
  /**< A new Game controller has been inserted into the system */
  CONTROLLERDEVICEADDED,
  /**< An opened Game controller has been removed */
  CONTROLLERDEVICEREMOVED,
  /**< The controller mapping was updated */
  CONTROLLERDEVICEREMAPPED,

  /* Touch events */

  FINGERDOWN  = 0x700u,
  FINGERUP,
  FINGERMOTION,

  /* Gesture events */

  DOLLARGESTURE   = 0x800u,
  DOLLARRECORD,
  MULTIGESTURE,

  /* Clipboard events */

  /**< The clipboard changed */
  CLIPBOARDUPDATE = 0x900u,

  /* Drag and drop events */

  /**< The system requests a file open */
  DROPFILE  = 0x1000u,
  /**< text/plain drag-and-drop event */
  DROPTEXT,
  /**< A new set of drops is beginning (NULL filename) */
  DROPBEGIN,
  /**< Current set of drops is now complete (NULL filename) */
  DROPCOMPLETE,

  /* Audio hotplug events */

  /**< A new audio device is available */
  AUDIODEVICEADDED = 0x1100u,
  /**< An audio device has been removed. */
  AUDIODEVICEREMOVED,

  /* Sensor events */

  /**< A sensor was updated */
  SENSORUPDATE = 0x1200u,

  /* Render events */

  /**< The render targets have been reset and their contents need to be updated */
  RENDER_TARGETS_RESET = 0x2000u,
  /**< The device has been reset and all textures need to be recreated */
  RENDER_DEVICE_RESET,

  /** Events ::USEREVENT through ::LASTEVENT are for your use,
   *  and should be allocated with SDL_RegisterEvents()
   */
  USEREVENT  = 0x8000u,

  /**
   *  This last event is only for bounding internal arrays
   */
  LASTEVENT  = 0xFFFFu
}


/**
 * Fields shared by every event, i.e. a timestamp.
 *
 * The time in milliseconds, populated using SDL_GetTicks().
 *
 * @note in contrast to C, the type is already enforced and held by the tagged
 *   union. Thus, only the timestamp needs to be shared and we don't need a type
 *   for that.
 */
type CommonEvent := Unsigned[32]

/**
 * Keyboard button event structure (event.key.*)
 */
public type KeyboardEvent {
  /** In milliseconds, populated using SDL_GetTicks() */
  public var timestamp : Unsigned[32]
  /**< The window with keyboard focus, if any */
  public var windowID : Unsigned[32]
  /**< ::SDL_PRESSED or ::SDL_RELEASED */
  public var state : Uint8
  /**< Non-zero if this is a key repeat */
  public var repeat : Uint8
  var padding2 : Uint8
  var padding3 : Uint8
  /**< The key that was pressed or released */
  public var keysym : Keysym
}


/**
 *  \brief Mouse motion event structure (event.motion.*)
 */
public type MouseMotionEvent {
  /** In milliseconds, populated using SDL_GetTicks() */
  public var timestamp : Unsigned[32]

  /**< The window with mouse focus, if any */
  public var windowID : Uint32
  /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
  public var which : Uint32
  /**< The current button state */
  public var state : Uint8

  public var padding1 : Uint8
  public var padding2 : Uint8
  public var padding3 : Uint8

  /**< X coordinate, relative to window */
  public var x : Sint32
  /**< Y coordinate, relative to window */
  public var y : Sint32
  /**< The relative motion in the X direction */
  public var xrel : Sint32
  /**< The relative motion in the Y direction */
  public var yrel : Sint32
}

/**
 *  \brief Mouse button event structure (event.button.*)
 */
public type MouseButtonEvent {
  /** In milliseconds, populated using SDL_GetTicks() */
  public var timestamp : Unsigned[32]

  /**< The window with mouse focus, if any */
  public var windowID : Uint32
  /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
  public var which : Uint32
  /**< The mouse button index */
  public var button : Uint8
   /**< ::SDL_PRESSED or ::SDL_RELEASED */
  public var state : Uint8

  public var padding1 : Uint8
  public var padding2 : Uint8

  /**< X coordinate, relative to window */
  public var x : Sint32
  /**< Y coordinate, relative to window */
  public var y : Sint32
}

/**
 *  \brief Mouse wheel event structure (event.wheel.*)
 */
public type MouseWheelEvent {
  /** In milliseconds, populated using SDL_GetTicks() */
  public var timestamp : Unsigned[32]

  /**< The window with mouse focus, if any */
  public var windowID : Uint32
  /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
  public var which : Uint32
  /**< The amount scrolled horizontally */
  public var x : Sint32
  /**< The amount scrolled vertically */
  public var y : Sint32
}

/**
 * The "quit requested" event
 */
public type QuitEvent {
  /** In milliseconds, populated using SDL_GetTicks() */
  public var timestamp : Unsigned[32]
}


public enum Event <: EventType {
  if KEYUP KeyboardEvent
  if KEYDOWN KeyboardEvent

  if MOUSEMOTION MouseMotionEvent
  if MOUSEBUTTONDOWN, MOUSEBUTTONUP MouseButtonEvent
  if MOUSEWHEEL MouseWheelEvent

  if QUIT QuitEvent

  // for the moment, reserve some space to ensure that all events could be represented
  // note: the SDL event is 56 bytes, the enum is 4 bytes
  else container.FlatSizedArray[byte, 52U]
}
