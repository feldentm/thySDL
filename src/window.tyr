with Uint32 := Unsigned[32];

with string := tyr.io.CString;

public type WindowFlags := int;

/**
 * Anything related to SDL_Window
 */
public type Window <: mem.OpaquePointer["SDL_Window"]{

  // macros
    /* !!! FIXME: change this to name = (1<<x). */
    public type val FULLSCREEN = 0x00000001u         /**< fullscreen window */
    public type val OPENGL = 0x00000002u             /**< window usable with OpenGL context */
    public type val SHOWN = 0x00000004u              /**< window is visible */
    public type val HIDDEN = 0x00000008u             /**< window is not visible */
    public type val BORDERLESS = 0x00000010u         /**< no window decoration */
    public type val RESIZABLE = 0x00000020u          /**< window can be resized */
    public type val MINIMIZED = 0x00000040u          /**< window is minimized */
    public type val MAXIMIZED = 0x00000080u          /**< window is maximized */
    public type val INPUT_GRABBED = 0x00000100u      /**< window has grabbed input focus */
    public type val INPUT_FOCUS = 0x00000200u        /**< window has input focus */
    public type val MOUSE_FOCUS = 0x00000400u        /**< window has mouse focus */
    public type val FULLSCREEN_DESKTOP = ( FULLSCREEN | 0x00001000u )
    public type val FOREIGN = 0x00000800u            /**< window not created by SDL */
    public type val ALLOW_HIGHDPI = 0x00002000u      /**< window should be created in high-DPI mode if supported.
                                                     On macOS NSHighResolutionCapable must be set true in the
                                                     application's Info.plist for this to have any effect. */
    public type val MOUSE_CAPTURE = 0x00004000u      /**< window has mouse captured (unrelated to INPUT_GRABBED) */
    public type val ALWAYS_ON_TOP = 0x00008000u      /**< window should always be above others */
    public type val SKIP_TASKBAR  = 0x00010000u      /**< window should not be added to the taskbar */
    public type val UTILITY       = 0x00020000u      /**< window should be treated as a utility window */
    public type val TOOLTIP       = 0x00040000u      /**< window should be treated as a tooltip */
    public type val POPUP_MENU    = 0x00080000u      /**< window should be treated as a popup menu */
    public type val VULKAN        = 0x10000000u      /**< window usable for Vulkan surface */


  // functions
/**
 *  \brief Create a window with the specified position, dimensions, and flags.
 *
 *  \param title The title of the window, in UTF-8 encoding.
 *  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
 *               ::SDL_WINDOWPOS_UNDEFINED.
 *  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
 *               ::SDL_WINDOWPOS_UNDEFINED.
 *  \param w     The width of the window, in screen coordinates.
 *  \param h     The height of the window, in screen coordinates.
 *  \param flags The flags for the window, a mask of any of the following:
 *               ::SDL_WINDOW_FULLSCREEN,    ::SDL_WINDOW_OPENGL,
 *               ::SDL_WINDOW_HIDDEN,        ::SDL_WINDOW_BORDERLESS,
 *               ::SDL_WINDOW_RESIZABLE,     ::SDL_WINDOW_MAXIMIZED,
 *               ::SDL_WINDOW_MINIMIZED,     ::SDL_WINDOW_INPUT_GRABBED,
 *               ::SDL_WINDOW_ALLOW_HIGHDPI, ::SDL_WINDOW_VULKAN.
 *
 *  \return The created window, or NULL if window creation failed.
 *
 *  If the window is created with the SDL_WINDOW_ALLOW_HIGHDPI flag, its size
 *  in pixels may differ from its size in screen coordinates on platforms with
 *  high-DPI support (e.g. iOS and Mac OS X). Use SDL_GetWindowSize() to query
 *  the client area's size in screen coordinates, and SDL_GL_GetDrawableSize(),
 *  SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to query the
 *  drawable size in pixels.
 *
 *  If the window is created with any of the SDL_WINDOW_OPENGL or
 *  SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function
 *  (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the
 *  corresponding UnloadLibrary function is called by SDL_DestroyWindow().
 *
 *  If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,
 *  SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.
 *
 *  \note On non-Apple devices, SDL requires you to either not link to the
 *        Vulkan loader or link to a dynamic library version. This limitation
 *        may be removed in a future version of SDL.
 *
 *  \sa SDL_DestroyWindow()
 *  \sa SDL_GL_LoadLibrary()
 *  \sa SDL_Vulkan_LoadLibrary()
 */
  public type def create(title : string,
                         x : int = 0, y : int = 0,
                         w : int = 800, h : int = 600,
                         flags : Uint32 = OPENGL) : Window
    extern sdl.SDL_CreateWindow;

/**
 * Destroy a window.
 *
 * If `window` is NULL, this function will return immediately after setting
 * the SDL error message to "Invalid window". See SDL_GetError().
 *
 * \param window the window to destroy
 *
 * \since This function is available since SDL 2.0.0.
 *
 * \sa SDL_CreateWindow
 * \sa SDL_CreateWindowFrom
 */
  public def destroy(this : Window) : void
    extern sdl.SDL_DestroyWindow;
}
